{
  "hash": "c9678c9228e7e8a08848dad1eeafddb4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"When is it time to do intertidal fieldwork?\"\ndescription: \"A workflow and code to add tidal fieldwork to a digital calendar\"\nauthor:\n  - name: Andrew Villeneuve\n    url: https://villesci.github.io/\n    orcid: 0000-0001-7303-5931\n    affiliation: PhD Candidate, Quantitative Marine Ecology Lab, University of New Hampshire\n    affiliation-url: https://quantmarineecolab.github.io/\ndate: 02-20-2025\ncategories: [R,tides,fieldwork] # self-defined categories\nbibliography: references.bib\n---\n\n\n\nAsk any intertidal ecologist what they think of first when planning fieldwork, and they will respond with \"when are the low tides?\" Indeed, we love studying intertidal systems because they are such an accessible window into the marine world, while adding the dynamics of tidal cycles onto how species respond to their environment and other organisms.\n\nWhat any intertidal ecologist will also tell you is that tides wait for no one. The tides we often seek to access to the lowest tidal elevations for longer periods of time do not abide by the frivolous 9-5 schedule humans like to keep. Many an intertidal ecologist has stories of working at 3:30 AM in a cold drizzle because that simply is the best time to work for the next few weeks.\n\n![Anyone know when the tide is comin' back in?](kent.jpg)\n\nRecently, another grad student and myself were trying to figure out how many days each week for the oncoming summer could we count on for decent field work. Normally, one might need to scroll through a tide app or the [NOAA CO-OPS tide predictions](https://tidesandcurrents.noaa.gov/tide_predictions.html) website to identify these times, which can be tedious if one is trying to plan an entire field season. I decided there had to be a better way to automate this process, and of course there is - using R! Below, we will 1) collect tide prediction data, 2) filter times and tide heights during which we want to do field work, and 3) create an .ics calendar file that we can later add to commonly used internet calendars, like Outlook and Google Calendar.\n\n*Important note: the data we produce below is NOT intended for navigation purposes, ESPECIALLY for the predictions from subordinate stations!!*\n\n# Getting Tide prediction data\n\nThere are many methods for downloading tide prediction data. The `rnoaa` [@rnoaa], `rtide` [@rtide], and `MarineTides` [@MarineTides] packages are three convenient in-R methods to download data.\n\n-   `rnoaa` provides access to harmonic-only sites, which are great if those are close enough to your field site\n\n-   `rtide` provides a faster interface that directly uses the tidal harmonics, not requiring an internet connection, and works over more sites. It draws on the same dataset as [XTide](https://flaterco.com/xtide/), a UNIX-based program with a very extensive set of tide stations. However, the package authors have only included harmonics stations in the dataset.\n\n-   `MarineTides` has the most extensive database of tide sites, including subordinate sites, in both the US and internationally. It also draws on the same dataset as [XTide](https://flaterco.com/xtide/).\n\nAs a note, the authors of `rtide` also created a [shiny app](https://poissonconsulting.shinyapps.io/rtide/) from which you can download tide data using rtide with a GUI!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install the packages if you have not already\nrequire(remotes)\nremotes::install_github(\"arestrom/MarineTides\")\ninstall.packages(\"rnoaa\")\ninstall.packages(\"rtide\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(rnoaa)\nrequire(MarineTides)\nrequire(rtide)\nrequire(data.table)\nrequire(tidyverse)\nrequire(ggplot2)\nrequire(ical)\nrequire(glue)\n```\n:::\n\n\n\n## `rnoaa`\n\nFirst, let's download data using `rnoaa`. I am most interested in tides in Great Bay, NH, but sadly the closest site in the CO_OPS harmonics database is Seavey Island in the Piscataqua River. We lookup the station ID on the CO_OPS website, and add our dates of interest (we will use the same dates for all three R methods). Unfortunately, rnoaa only lets us download 31 days of data at a time, so we will need to set up a function to download each month.\n\n**NOTE** It looks like rnoaa is not being supported, and some functions are broken :( This code still works, but hopefully they come up with a replacement package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndl_months<-data.frame(date_index=1:5,\nbegin_dates=c(20250501,20250601,20250701,20250801,20250901),\nend_dates=c(20250530,20250630,20250731,20250831,20250930))\n\nsite_id=8419870\n\nrnoaa_func<-function(time_df){\n  rnoaa_output<-coops_search(station_name = site_id,\n             begin_date = time_df$begin_dates,\n             end_date=time_df$end_dates,\n             product = \"predictions\", #we want tide PREDICTIONs. If we watned past heights, could use \"hourly_height\")\n             datum = \"MLLW\", #MLLW datum, which is standard at Seavey\n             units = \"metric\")$predictions%>%# we will convert this to feet for us Americans later :)\n    dplyr::rename(datetime=t,tide_height=v)%>%\n    dplyr::mutate(datetime=with_tz(as.POSIXct(datetime,format=\"%Y-%m-%d %H:%M\",tz=\"GMT\")),tz=\"America/New_York\")\n}\n\nsystem.time(\n  rnoaa_output_seavey<-dl_months%>%\n    group_by(date_index)%>%\n    group_modify(~rnoaa_func(.x))%>%\n    ungroup()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   user  system elapsed \n   0.99    0.06    3.14 \n```\n\n\n:::\n\n```{.r .cell-code}\nhead(rnoaa_output_seavey)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  date_index datetime            tide_height tz              \n       <int> <dttm>                    <dbl> <chr>           \n1          1 2025-04-30 20:00:00       0.019 America/New_York\n2          1 2025-04-30 20:06:00       0.016 America/New_York\n3          1 2025-04-30 20:12:00       0.018 America/New_York\n4          1 2025-04-30 20:18:00       0.023 America/New_York\n5          1 2025-04-30 20:24:00       0.032 America/New_York\n6          1 2025-04-30 20:30:00       0.046 America/New_York\n```\n\n\n:::\n:::\n\n\n\nNote that the output of rnoaa defaults to every 6 minutes (10 obs/hour), which is an odd way to slice data IMO. You could always go back and select every 15 minutes, or interpolate to every minute. Also note that the datetime comes back to us in GMT only, so we must force a time zone conversion to eastern time. This does mean you won't get the full last day of your time series due to the shift in the timezone, so worth adding an extra day just in case\n\n## `rtide`\n\nLet's try to do the same with `rtide`, getting closer to our field site if we can. Unfortunately, the Dover site is way upstream in the Cocheco River and not very relevant to us. So, let's get the Seavey Island data again.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstations<-rtide::tide_stations()\nstations[str_detect(stations, \"New Hampshire\")] #some tidyverse magic to search for our state. \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Dover, Cocheco River, Piscataqua River, New Hampshire\"\n[2] \"Fort Point, Portsmouth Harbor, New Hampshire\"         \n[3] \"Seavey Island, Portsmouth Harbor, New Hampshire\"      \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem.time(rtide_output_seavey<-tide_height(\n  stations = \"Seavey Island, Portsmouth Harbor, New Hampshire\" ,\n  minutes = 6L, #nice! We can select our frequency. TO keep it standard in this post, let's do every 6mins\n  from = as.Date(\"2025-05-01\"),\n  to = as.Date(\"2025-09-30\"),\n  tz = \"America/New_York\",\n  harmonics = rtide::harmonics\n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   user  system elapsed \n  26.73    2.44   30.54 \n```\n\n\n:::\n\n```{.r .cell-code}\nhead(rtide_output_seavey)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  Station                                         DateTime            TideHeight\n  <chr>                                           <dttm>                   <dbl>\n1 Seavey Island, Portsmouth Harbor, New Hampshire 2025-05-01 00:00:00       2.13\n2 Seavey Island, Portsmouth Harbor, New Hampshire 2025-05-01 00:06:00       2.20\n3 Seavey Island, Portsmouth Harbor, New Hampshire 2025-05-01 00:12:00       2.27\n4 Seavey Island, Portsmouth Harbor, New Hampshire 2025-05-01 00:18:00       2.34\n5 Seavey Island, Portsmouth Harbor, New Hampshire 2025-05-01 00:24:00       2.40\n6 Seavey Island, Portsmouth Harbor, New Hampshire 2025-05-01 00:30:00       2.46\n```\n\n\n:::\n:::\n\n\n\n## `MarineTides`\n\n`MarineTides` is a very robust r package for getting ride information because 1) it uses data.table and is thus faster, and 2) allows the user to download subordiante data! This to me is critical, as it allows us to get a much closer station to our field site. Unfortunately, it only returns tide high and lows for subordinate sites, rather than predictions on a minute-basis.\n\nI do know the CO-OPS name for the subordinate site of interest is at Dover Point, so let's get data from both Seavey Island and Dover Point\n\n\n\n\n\n\n\nBelow we get the tide data from Seavey Island\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem.time(MarineTides_output_seavey<-MarineTides::tide_level(tide_station=\"Seavey Island\",\n                        start_date=\"2025-05-01\",\n                        end_date=\"2025-09-30\",\n                        data_interval = \"6-min\",\n                        tide_unit = \"meters\",\n                        timezone = \"America/New_York\",\n                        verbose=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeavey Island is a reference station. Tide heights are\ncalculated from Seavey Island harmonic constituents. \n\nTides will be predicted from 2025-05-01 to 2025-09-30\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   user  system elapsed \n   1.70    0.05    1.83 \n```\n\n\n:::\n\n```{.r .cell-code}\nhead(MarineTides_output_seavey)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   station_code  station_name reference_station_code tide_type\n         <char>        <char>                 <char>    <char>\n1:      8419870 Seavey Island                8419870         P\n2:      8419870 Seavey Island                8419870         P\n3:      8419870 Seavey Island                8419870         P\n4:      8419870 Seavey Island                8419870         P\n5:      8419870 Seavey Island                8419870         P\n6:      8419870 Seavey Island                8419870         P\n             tide_time   tide_level\n                <POSc>      <units>\n1: 2025-05-01 00:00:00 2.098570 [m]\n2: 2025-05-01 00:06:00 2.166778 [m]\n3: 2025-05-01 00:12:00 2.233378 [m]\n4: 2025-05-01 00:18:00 2.298212 [m]\n5: 2025-05-01 00:24:00 2.361124 [m]\n6: 2025-05-01 00:30:00 2.421967 [m]\n```\n\n\n:::\n:::\n\n\n\nLet's do it again, but for a subordinate site Dover Point.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem.time(MarineTides_output_dover<-MarineTides::tide_level(tide_station=\"Dover Point\",\n                        start_date=\"2025-05-01\",\n                        end_date=\"2025-09-30\",\n                        tide_unit = \"meters\",\n                        timezone = \"America/New_York\",\n                        verbose=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDover Point is a subordinate station. The reference station, \nPortland, is located 76.35 km. away. Tide levels are \ncalculated from Portland harmonic constituents at one \nminute increments. Values for high and low tide are extracted, \nthen time and height offset corrections are applied to obtain the \nDover Point predictions. \n\nTides will be predicted from 2025-05-01 to 2025-09-30\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in MarineTides::tide_level(tide_station = \"Dover Point\", start_date = \"2025-05-01\", : \nFor subordinate stations, only high and low tide values will be computed.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   user  system elapsed \n   0.77    0.00    0.77 \n```\n\n\n:::\n\n```{.r .cell-code}\nhead(MarineTides_output_dover)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   station_code station_name reference_station_code tide_type\n         <char>       <char>                 <char>    <char>\n1:      8421897  Dover Point                8418150         H\n2:      8421897  Dover Point                8418150         L\n3:      8421897  Dover Point                8418150         H\n4:      8421897  Dover Point                8418150         L\n5:      8421897  Dover Point                8418150         H\n6:      8421897  Dover Point                8418150         L\n             tide_time      tide_level\n                <POSc>         <units>\n1: 2025-05-01 03:33:00  2.40556719 [m]\n2: 2025-05-01 09:57:00 -0.27604658 [m]\n3: 2025-05-01 16:18:00  2.04071289 [m]\n4: 2025-05-01 22:12:00  0.08293358 [m]\n5: 2025-05-02 04:33:00  2.28938917 [m]\n6: 2025-05-02 10:57:00 -0.15398555 [m]\n```\n\n\n:::\n:::\n\n\n\nSo not only is this fast, but it gets us information on both harmonic and subordinate sites! So, I know why the programmers of `MarineTides` did not give us the capacity to predict tides from subordinate sites - we can only set subordinate site offsets based on the timing of high or low tides. If we tried to predict a subordinate station, we basically would just shift the time and height based on the offset. *BUT* we could do it, as long as we acknowledge that the tide harmonics are not calculated for these sites, and thus the shape of the tidal series in between extreme are not known. To quote the XTide developer David Flater, \"*All subordinate station predictions are approximate*\"\n\nQuick gut check to make sure our timezones are correct, and to see if any one method seems to depart from the other! They all look good, note again `rnoaa` has an earlier start date due to that GMT data fetch.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n## XTide\n\n[XTide](https://flaterco.com/xtide/) is an awesome UNIX tide prediction program that I use for much of our intertidal work because it provides predictions over harmonic *and* subordinate stations. Nifty!\n\nTo install, follow the instructions on the [XTide installation page](https://flaterco.com/xtide/installation.html) and the [Port page](https://flaterco.com/xtide/ports.html) for non-UNIX systems. It is a little involved, especially on Windows machines. I ended up installing a Windows Subsystem for Linux (WSL) to run Ubuntu. Here is another possibility using a [BIOS builder](https://www.vogons.org/viewtopic.php?t=104374). Note that you might want to download additional files, like the global shapefiles, if you want to use the GUI application as well as Xtide from the command line. I am not anywhere close to knowing what I am doing when it comes to Linux, so the help pages and google are your friends here.\n\nOnce you have Xtide downloaded, you can play around with the GUI which is fun!\n\n![Starting screen of Xtide](xtide_screen1.jpg){width=\"1000\"}\n\n![Dover Point subordinate station in Xtide showing various data products](xtide_screen2.jpg){width=\"1000\"}\n\nYou can even directly download the data from these windows. But, I prefer just being able to get my data through command line. Take a look at the [command line options](https://flaterco.com/xtide/tty.html), as well as the [data types](https://flaterco.com/xtide/modes.html) we can request. To translate this code into english, we are requesting data from\n\n-   Dover Point between\n\n-   May 1st, 2025 and\n\n-   September 30th, 2025 in\n\n-   .csv format. The data type will be\n\n-   \"medium rare,\" which gives us datetime stamps along with tide height, and it will give it to us every\n\n-   15 minutes. Save the file at the location\n\n-   \"xtide/2025summer_dover.csv\", which is a pre-existing, empty .csv file in my root Linux directory.\n\n\n\n::: {.cell}\n\n```{.code .cell-code}\ntide -l \"Dover Point, Piscataqua River, New Hampshire\" -b \"2025-05-01 00:00\" -e \"2025-09-30 00:00\" -f c -m m -s \"00:15\" -o \"2025summer_dover.csv\"\n```\n:::\n\n\n\nAlso, maybe you just want an .ics file of tide hight and lows? Simple!\n\n\n\n::: {.cell}\n\n```{.code .cell-code}\ntide -l \"Dover Point, Piscataqua River, New Hampshire\" -b \"2025-05-01 00:00\" -e \"2025-09-30 00:00\" -f i -m c -o \"xtide/2025summer_dover.ics\"\n```\n:::\n\n\n\nOnce we run the medium rare code (first code block), we have the requested tide predictions at our subordinate site. We are now ready to move on to creating a custom intertidal fieldwork calendar in R.\n\n# Intertidal Field Calendar in R\n\nOnce we have the tidal data from a site we want, we can begin creating a field calendar. When I created this code, I had 3 goals:\n\n1)  Remove times and days of week that we don't want to do field work from consideration. Maybe I'm getting soft (or I am no longer doing intertidal field work for my dissertation), but I'd like to not schedule field work during the weekends, before 8 AM, or after 6 PM.\n\n2)  I want the length of the calendar event to start and end as soon as tide conditions at my chosen site are conducive. For example, I want to start tidal work as soon as the tide dips below 1ft at Dover Point, and stop field work once the tide rises back to 1ft.\n\n3)  I want my calendar event to contain information about the length of time the tide is below my chosen height (1ft), as well as the time of dead low and the length of the low tide.\n\nLet's get started. I ended up using data I downloaded from XTide (), so it may be formatted differently than if you use another source. One important feature we implemented is an additional time offset from the subordinate station (physical oceanographers cringe here) based on our field observations of when low tide occurs at Adams Point compared to Dover Point. We add 45 minutes to the entire tide series to make it approximate our actual field site.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndover_2025<-read.csv(\"2025summer_dover.csv\",col.names=c(\"site\",\"date\",\"time\",\"tide\"),colClasses = c(\"character\",\"Date\",\"character\",\"numeric\"))\n\ndover_2025$datetime<-as.POSIXct(paste0(dover_2025$date,\" \",dover_2025$time),format=\"%Y-%m-%d %H:%M\")\n\n#in our case, Adam's Point (our field site) is 45 minutes after DOver Point\ndover_2025$datetime<-dover_2025$datetime+minutes(45)\ndover_2025$time<-hm(dover_2025$time)\n\ndover_2025$tide_f<-dover_2025$tide/0.3048 #meters to feet\n```\n:::\n\n\n\nNow, let's extract the information I want from this tidal series to go into a calendar. I decided to filter intertidal fieldwork based on:\n\n-   start time\n\n-   end time\n\n-   day of week\n\n-   highest tide height we are willing to accept for fieldwork\n\n-   minimum required time in intertidal\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time<-\"08:00:00\" #start time\nend_time<-\"18:00:00\" #quitting time\nwork_days<-c(\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\")#days we want to work\nworkable_tide_height<-1 #height, here in feet, below which we can work\nminimum_workable_session<-30 #time in minutes\n\n\ndover_summ<-dover_2025%>%\n  group_by(date)%>%#stats by each day\n  dplyr::filter(time>hms(start_time) & time<hms(end_time))%>%#filter out times we don't want to work\n    dplyr::filter(weekdays(date) %in% work_days)%>%#include  days of week we can work\n  dplyr::filter(tide_f<=workable_tide_height)%>%#filter our tide times that are too high for us to work\n  summarise(\"total_mins\"=difftime(max(datetime),min(datetime),units=\"mins\"),#total time we can work in the intertidal, in minutes, given above filters\n            \"min_ht\"=min(tide_f),#low tide height\n            \"low_tide_time\"=datetime[which.min(tide_f)],#timing of the low tide\n            \"fieldwork_start\"=datetime[1],#timestamp when tide goes below our threshold\n            \"fieldwork_end\"=last(datetime),#timestamp when tide goes above our threshold\n            \"workable_tide_height\"=workable_tide_height#print this here for use later\n)%>%\n  dplyr::filter(total_mins>minimum_workable_session)%>%#remove sessions that are less than our minimum requirement\n  ungroup()\nhead(dover_summ)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 7\n  date       total_mins min_ht low_tide_time       fieldwork_start    \n  <date>     <drtn>      <dbl> <dttm>              <dttm>             \n1 2025-05-01 180 mins   -3.00  2025-05-01 10:45:00 2025-05-01 09:15:00\n2 2025-05-02 150 mins   -1.68  2025-05-02 11:45:00 2025-05-02 10:30:00\n3 2025-05-14  45 mins    0.580 2025-05-14 09:15:00 2025-05-14 09:00:00\n4 2025-05-15  45 mins    0.758 2025-05-15 09:45:00 2025-05-15 09:30:00\n5 2025-05-28  75 mins   -3.55  2025-05-28 09:00:00 2025-05-28 09:00:00\n6 2025-05-29 135 mins   -3.26  2025-05-29 09:30:00 2025-05-29 09:00:00\n# ℹ 2 more variables: fieldwork_end <dttm>, workable_tide_height <dbl>\n```\n\n\n:::\n:::\n\n\n\nI'd be remiss if I didn't try some fun data viz in ggplot. I wish we could make a calendar like this! But good for getting broad strokes on what days have the biggest tides.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dover_summ, aes(x = wday(date, label = TRUE, week_start = 1),  # Ensures Monday starts first\n                       y = week(date), \n                       fill = total_mins)) +\n  geom_tile(color = \"black\") +\n  scale_fill_viridis_c() +\n  facet_wrap(~ month(date, label = TRUE, abbr = FALSE), scales = \"free_y\", ncol = 3) +  # Split by month\n  labs(x = \"Day of Week\", \n       y = \"Week of Year\", \n       fill = \"Minutes of Low Tide Exposure\",title=\"Adams Point Tides <1ft and >30min duration\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nNow that we have the required summary statistics, let's create our .ics file using the [@ical] package. I did use a LLM to help me create the code from here on out, so trust but verify if you do this yourself. The function below takes as input our calendar parameters (date, start time of field work, end time of field work, the minimum tide height, and the total amount of time available below our threshold for field work. In the \"DESCRIPTION\" field, I filled out some information that will print the minimum height and total time of field work, as well as information relevant to our field work such as the time offset I used. The \"LOCATION\" tab can be filled out with a description or an address, which some online calendars will recognize and provide a geotagged location!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_ics_event <- function(date, start_time, end_time, min_ht, total_mins,workable_tide_height) {\n  # Assign categories based on tide depth. Some online calendars will allow the .ics file to control the color of the event, but in my experience with google calendar and outlook this is not possible. \n  category <- case_when(\n    min_ht < -1 ~ \"Red\",\n    min_ht < 0  ~ \"Orange\",\n    min_ht < 0.5 ~ \"Yellow\",\n    TRUE       ~ \"Blue\"\n  )\n  \n  glue(\"BEGIN:VEVENT\nDTSTART:{format(start_time, '%Y%m%dT%H%M%S')}\nDTEND:{format(end_time, '%Y%m%dT%H%M%S')}\nSUMMARY:Fieldwork - Low Tide Monitoring\nDESCRIPTION:Low tide reached {min_ht} meters. Exposure lasted {total_mins}. Event start and stop indicate\nwhen tide drops below or rises above {workable_tide_height}ft. Tide data from Dover Point Tide Station, plus a 45 minute offset. \nLOCATION:Adam's Point\nCATEGORIES:{category}\nEND:VEVENT\")\n}\n```\n:::\n\n\n\nNow we can apply the function to our summary dataframe, and write the formatted file to an .ics file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nics_events <- dover_summ %>%\n  mutate(\n    event_start = fieldwork_start, \n    event_end = fieldwork_end\n  ) %>%\n  rowwise() %>%\n  mutate(event = create_ics_event(date, event_start, event_end, min_ht, total_mins,workable_tide_height)) %>%\n  pull(event)\n\n# Combine into a single ICS file - this is needed to tell the calendar program that we are uploading an entire calendar\nics_content <- c(\"BEGIN:VCALENDAR\", \"VERSION:2.0\", ics_events, \"END:VCALENDAR\")\n\n# Save to a .ics file\nwriteLines(ics_content, \"fieldwork_schedule_2025.ics\")\n```\n:::\n\n\n\n# Use notes\n\nWe now have a .ics file that contains intertidal field survey times that meet our criteria which we can now upload to any online calendar! An important note, you should first create a blank calendar before uploading the .ics file into this new calendar. If you upload the .ics straight to your primary calendar, it is next to impossible to delete all of these events at once.\n\nIn (new) Outlook:\n\n1.  Select the Calendar tab\n\n2.  On the left side ribbon, below the monthly calendar overview, select \"Add Calendar\"\n\n3.  Select \"Create blank calendar\"\n\n4.  Name the field calendar how you want, and add it to your root account calendar. Select \"save\"\n\n5.  Select \"Add Calendar\" again\n\n6.  Select \"Upload from file\"\n\n7.  Browse towards your saved .ics file, *then make sure you select the blank field calendar you just created*\n\n8.  Select \"Import.\"\n\n9.  You are done! You now have fieldwork events in your calendar.\n\n![Intertidal field sessions uploaded into Outlook Calendar](outlook.jpg){width=\"700\"}\n\nIn Google Calendar:\n\n1.  In the main calendar view, select the \"+\" button next to \"Other Calendars\" on the left hand ribbon\n\n2.  Select \"Create new calendar\"\n\n3.  Add an appropriate name and description. Select \"Create Calendar\"\n\n4.  In the main calendar view, select the \"+\" button next to \"Other Calendars\" on the left hand ribbon and \"Import\"\n\n5.  Select the .ics file from your computer, *then make sure you select the blank field calendar you just created.*\n\n6.  Select \"Import\"\n\nNow you're done, but with a different giant tech monopoly!\n\n![Drilling rock anchors is best when not underwater](josie.JPEG){width=\"250\"}\n\nThanks for reading! Do let me know if you have any comments or suggestions - I'd love to hear them. I may create a shiny app to automatically create the .ics file in the future, if this is something you would like drop a comment below.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}